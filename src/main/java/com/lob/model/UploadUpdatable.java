/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lob.model.UploadState;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
/**
 * UploadUpdatable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UploadUpdatable {
  public static final String SERIALIZED_NAME_COLUMN_MAPPING = "columnMapping";

  @SerializedName(SERIALIZED_NAME_COLUMN_MAPPING)
  

  private Object columnMapping;
  /**
  * The mapping of column headers in your file to Lob-required fields for the resource created. See our <a href=\"https://help.lob.com/best-practices/campaign-audience-guide\" target=\"_blank\">Campaign Audience Guide</a> for additional details.
  * @return columnMapping
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(example = "{\"firstName\":\"first_name\",\"lastName\":\"last_name\"}", value = "The mapping of column headers in your file to Lob-required fields for the resource created. See our <a href=\"https://help.lob.com/best-practices/campaign-audience-guide\" target=\"_blank\">Campaign Audience Guide</a> for additional details.")
  
  public Object getColumnMapping() {
      return columnMapping;
  }
  
  

  public static final String SERIALIZED_NAME_STATE = "state";

  @SerializedName(SERIALIZED_NAME_STATE)
  

  private UploadState state = UploadState.DRAFT;
  /**
  * Get state
  * @return state
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "")
  
  public UploadState getState() {
      return state;
  }
  
  

  public static final String SERIALIZED_NAME_ORIGINAL_FILENAME = "originalFilename";

  @SerializedName(SERIALIZED_NAME_ORIGINAL_FILENAME)
  

  private String originalFilename;
  /**
  * Original filename provided when the upload is created.
  * @return originalFilename
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "Original filename provided when the upload is created.")
  
  public String getOriginalFilename() {
      return originalFilename;
  }
  
  

  public static final String SERIALIZED_NAME_OVERWRITE_COLUMN_MAPPING = "overwriteColumnMapping";

  @SerializedName(SERIALIZED_NAME_OVERWRITE_COLUMN_MAPPING)
  

  private Boolean overwriteColumnMapping;
  /**
  * Properties in `columnMapping` will be appended to the existing `columnMapping` object if set to `false`. If set to `true`, the existing `columnMapping` object will be overwritten with the data supplied in `columnMapping` property. 
  * @return overwriteColumnMapping
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "Properties in `columnMapping` will be appended to the existing `columnMapping` object if set to `false`. If set to `true`, the existing `columnMapping` object will be overwritten with the data supplied in `columnMapping` property. ")
  
  public Boolean getOverwriteColumnMapping() {
      return overwriteColumnMapping;
  }
  
  


  /*
  public UploadUpdatable columnMapping(Object columnMapping) {
    
    this.columnMapping = columnMapping;
    return this;
  }
  */


  public void setColumnMapping(Object columnMapping) {
    this.columnMapping = columnMapping;
  }



  /*
  public UploadUpdatable state(UploadState state) {
    
    this.state = state;
    return this;
  }
  */


  public void setState(UploadState state) {
    this.state = state;
  }



  /*
  public UploadUpdatable originalFilename(String originalFilename) {
    
    this.originalFilename = originalFilename;
    return this;
  }
  */


  public void setOriginalFilename(String originalFilename) {
    this.originalFilename = originalFilename;
  }



  /*
  public UploadUpdatable overwriteColumnMapping(Boolean overwriteColumnMapping) {
    
    this.overwriteColumnMapping = overwriteColumnMapping;
    return this;
  }
  */


  public void setOverwriteColumnMapping(Boolean overwriteColumnMapping) {
    this.overwriteColumnMapping = overwriteColumnMapping;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadUpdatable uploadUpdatable = (UploadUpdatable) o;
    return Objects.equals(this.columnMapping, uploadUpdatable.columnMapping) &&
        Objects.equals(this.state, uploadUpdatable.state) &&
        Objects.equals(this.originalFilename, uploadUpdatable.originalFilename) &&
        Objects.equals(this.overwriteColumnMapping, uploadUpdatable.overwriteColumnMapping);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnMapping, state, originalFilename, overwriteColumnMapping);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    sb.append("    columnMapping: ").append(toIndentedString(columnMapping)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    originalFilename: ").append(toIndentedString(originalFilename)).append("\n");
    sb.append("    overwriteColumnMapping: ").append(toIndentedString(overwriteColumnMapping)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

