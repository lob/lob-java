/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
/**
 * BuckslipEditable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BuckslipEditable {
  public static final String SERIALIZED_NAME_FRONT = "front";

  @SerializedName(SERIALIZED_NAME_FRONT)
  

  private String front;
  /**
  * A PDF template for the front of the buckslip
  * @return front
  **/
  
  @javax.annotation.Nonnull
  
  @ApiModelProperty(required = true, value = "A PDF template for the front of the buckslip")
  
  public String getFront() {
      return front;
  }
  
  

  public static final String SERIALIZED_NAME_BACK = "back";

  @SerializedName(SERIALIZED_NAME_BACK)
  

  private String back;
  /**
  * A PDF template for the back of the buckslip
  * @return back
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "A PDF template for the back of the buckslip")
  
  public String getBack() {
      return back;
  }
  
  

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";

  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  

  private String description;
  /**
  * Description of the buckslip.
  * @return description
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "Description of the buckslip.")
  
  public String getDescription() {
      return description;
  }
  
  

  /**
   * The size of the buckslip
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    _8_75X3_75("8.75x3.75");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";

  @SerializedName(SERIALIZED_NAME_SIZE)
  

  private SizeEnum size = SizeEnum._8_75X3_75;
  /**
  * The size of the buckslip
  * @return size
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "The size of the buckslip")
  
  public SizeEnum getSize() {
      return size;
  }
  
  


  /*
  public BuckslipEditable front(String front) {
    
    this.front = front;
    return this;
  }
  */


  public void setFront(String front) {
    this.front = front;
  }



  /*
  public BuckslipEditable back(String back) {
    
    this.back = back;
    return this;
  }
  */


  public void setBack(String back) {
    this.back = back;
  }



  /*
  public BuckslipEditable description(String description) {
    
    this.description = description;
    return this;
  }
  */


  public void setDescription(String description) {
    this.description = description;
  }



  /*
  public BuckslipEditable size(SizeEnum size) {
    
    this.size = size;
    return this;
  }
  */


  public void setSize(SizeEnum size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuckslipEditable buckslipEditable = (BuckslipEditable) o;
    return Objects.equals(this.front, buckslipEditable.front) &&
        Objects.equals(this.back, buckslipEditable.back) &&
        Objects.equals(this.description, buckslipEditable.description) &&
        Objects.equals(this.size, buckslipEditable.size);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(front, back, description, size);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    sb.append("    front: ").append(toIndentedString(front)).append("\n");
    sb.append("    back: ").append(toIndentedString(back)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

