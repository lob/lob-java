/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
/**
 * SortByDateModified
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SortByDateModified {
  /**
   * Gets or Sets dateCreated
   */
  @JsonAdapter(DateCreatedEnum.Adapter.class)
  public enum DateCreatedEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    DateCreatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateCreatedEnum fromValue(String value) {
      for (DateCreatedEnum b : DateCreatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateCreatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateCreatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateCreatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateCreatedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";

  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  

  private DateCreatedEnum dateCreated;
  /**
  * Get dateCreated
  * @return dateCreated
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "")
  
  public DateCreatedEnum getDateCreated() {
      return dateCreated;
  }
  
  

  /**
   * Gets or Sets dateModified
   */
  @JsonAdapter(DateModifiedEnum.Adapter.class)
  public enum DateModifiedEnum {
    ASC("asc"),
    
    DESC("desc");

    private String value;

    DateModifiedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DateModifiedEnum fromValue(String value) {
      for (DateModifiedEnum b : DateModifiedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DateModifiedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DateModifiedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DateModifiedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DateModifiedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";

  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  

  private DateModifiedEnum dateModified;
  /**
  * Get dateModified
  * @return dateModified
  **/
  
  @javax.annotation.Nullable
  
  @ApiModelProperty(value = "")
  
  public DateModifiedEnum getDateModified() {
      return dateModified;
  }
  
  


  /*
  public SortByDateModified dateCreated(DateCreatedEnum dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }
  */


  public void setDateCreated(DateCreatedEnum dateCreated) {
    this.dateCreated = dateCreated;
  }



  /*
  public SortByDateModified dateModified(DateModifiedEnum dateModified) {
    
    this.dateModified = dateModified;
    return this;
  }
  */


  public void setDateModified(DateModifiedEnum dateModified) {
    this.dateModified = dateModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortByDateModified sortByDateModified = (SortByDateModified) o;
    return Objects.equals(this.dateCreated, sortByDateModified.dateCreated) &&
        Objects.equals(this.dateModified, sortByDateModified.dateModified);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

