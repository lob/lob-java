/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.api.client;

import com.lob.api.ApiCallback;
import com.lob.api.ApiClient;
import com.lob.api.ApiException;
import com.lob.api.ApiResponse;
import com.lob.api.Configuration;
import com.lob.api.Pair;
import com.lob.api.ProgressRequestBody;
import com.lob.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.lob.model.ExportModel;
import java.io.File;
import com.lob.model.InlineResponse200;
import com.lob.model.LobError;
import com.lob.model.Upload;
import com.lob.model.UploadCreateExport;
import com.lob.model.UploadFile;
import com.lob.model.UploadList;
import com.lob.model.UploadUpdatable;
import com.lob.model.UploadWritable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UploadsApi {
    private ApiClient localVarApiClient;

    public UploadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for Retrieve Export
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call Retrieve ExportCall(String uplId, String exId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/exports/{ex_id}"
            .replaceAll("\\{" + "upl_id" + "\\}", localVarApiClient.escapeString(uplId.toString()))
            .replaceAll("\\{" + "ex_id" + "\\}", localVarApiClient.escapeString(exId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call Retrieve ExportValidateBeforeCall(String uplId, String exId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling Retrieve Export(Async)");
        }
        
        // verify the required parameter 'exId' is set
        if (exId == null) {
            throw new ApiException("Missing the required parameter 'exId' when calling Retrieve Export(Async)");
        }
        

        okhttp3.Call localVarCall = Retrieve ExportCall(uplId, exId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve Export
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 Retrieve Export(String uplId, String exId) throws ApiException {
        try {
            ApiResponse<InlineResponse200> localVarResp = Retrieve ExportWithHttpInfo(uplId, exId);
            return localVarResp.getData();
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Retrieve Export
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> Retrieve ExportWithHttpInfo(String uplId, String exId) throws ApiException {
        try {
            okhttp3.Call localVarCall = Retrieve ExportValidateBeforeCall(uplId, exId, null);
            Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Retrieve Export (asynchronously)
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call Retrieve ExportAsync(String uplId, String exId, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = Retrieve ExportValidateBeforeCall(uplId, exId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for Create
     * @param uploadWritable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call CreateCall(UploadWritable uploadWritable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = uploadWritable;

        // create path and map variables
        String localVarPath = "/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call CreateValidateBeforeCall(UploadWritable uploadWritable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uploadWritable' is set
        if (uploadWritable == null) {
            throw new ApiException("Missing the required parameter 'uploadWritable' when calling Create(Async)");
        }
        

        okhttp3.Call localVarCall = CreateCall(uploadWritable, _callback);
        return localVarCall;

    }

    /**
     * Create
     * Creates a new upload with the provided properties.
     * @param uploadWritable  (required)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public Upload Create(UploadWritable uploadWritable) throws ApiException {
        try {
            ApiResponse<Upload> localVarResp = CreateWithHttpInfo(uploadWritable);
            return localVarResp.getData();
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Create
     * Creates a new upload with the provided properties.
     * @param uploadWritable  (required)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> CreateWithHttpInfo(UploadWritable uploadWritable) throws ApiException {
        try {
            okhttp3.Call localVarCall = CreateValidateBeforeCall(uploadWritable, null);
            Type localVarReturnType = new TypeToken<Upload>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Create (asynchronously)
     * Creates a new upload with the provided properties.
     * @param uploadWritable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call CreateAsync(UploadWritable uploadWritable, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = CreateValidateBeforeCall(uploadWritable, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for Delete
     * @param uplId id of the upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call DeleteCall(String uplId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replaceAll("\\{" + "upl_id" + "\\}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call DeleteValidateBeforeCall(String uplId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling Delete(Async)");
        }
        

        okhttp3.Call localVarCall = DeleteCall(uplId, _callback);
        return localVarCall;

    }

    /**
     * Delete
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public void Delete(String uplId) throws ApiException {
        try {
            DeleteWithHttpInfo(uplId);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Delete
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> DeleteWithHttpInfo(String uplId) throws ApiException {
        try {
            okhttp3.Call localVarCall = DeleteValidateBeforeCall(uplId, null);
            return localVarApiClient.execute(localVarCall);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Delete (asynchronously)
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call DeleteAsync(String uplId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = DeleteValidateBeforeCall(uplId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for Create Export
     * @param uplId ID of the upload (required)
     * @param exportModel  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call Create ExportCall(String uplId, ExportModel exportModel, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = exportModel;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/exports"
            .replaceAll("\\{" + "upl_id" + "\\}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call Create ExportValidateBeforeCall(String uplId, ExportModel exportModel, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling Create Export(Async)");
        }
        
        // verify the required parameter 'exportModel' is set
        if (exportModel == null) {
            throw new ApiException("Missing the required parameter 'exportModel' when calling Create Export(Async)");
        }
        

        okhttp3.Call localVarCall = Create ExportCall(uplId, exportModel, _callback);
        return localVarCall;

    }

    /**
     * Create Export
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/best-practices/launching-your-first-campaign).  Create an export file associated with an upload.
     * @param uplId ID of the upload (required)
     * @param exportModel  (required)
     * @return UploadCreateExport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public UploadCreateExport Create Export(String uplId, ExportModel exportModel) throws ApiException {
        try {
            ApiResponse<UploadCreateExport> localVarResp = Create ExportWithHttpInfo(uplId, exportModel);
            return localVarResp.getData();
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Create Export
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/best-practices/launching-your-first-campaign).  Create an export file associated with an upload.
     * @param uplId ID of the upload (required)
     * @param exportModel  (required)
     * @return ApiResponse&lt;UploadCreateExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadCreateExport> Create ExportWithHttpInfo(String uplId, ExportModel exportModel) throws ApiException {
        try {
            okhttp3.Call localVarCall = Create ExportValidateBeforeCall(uplId, exportModel, null);
            Type localVarReturnType = new TypeToken<UploadCreateExport>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Create Export (asynchronously)
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/best-practices/launching-your-first-campaign).  Create an export file associated with an upload.
     * @param uplId ID of the upload (required)
     * @param exportModel  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call Create ExportAsync(String uplId, ExportModel exportModel, final ApiCallback<UploadCreateExport> _callback) throws ApiException {

        okhttp3.Call localVarCall = Create ExportValidateBeforeCall(uplId, exportModel, _callback);
        Type localVarReturnType = new TypeToken<UploadCreateExport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for Upload file
     * @param uplId ID of the upload (required)
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call Upload fileCall(String uplId, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/file"
            .replaceAll("\\{" + "upl_id" + "\\}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call Upload fileValidateBeforeCall(String uplId, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling Upload file(Async)");
        }
        

        okhttp3.Call localVarCall = Upload fileCall(uplId, file, _callback);
        return localVarCall;

    }

    /**
     * Upload file
     * Upload an [audience file](https://help.lob.com/best-practices/campaign-audience-guide) and associate it with an upload.
     * @param uplId ID of the upload (required)
     * @param file  (optional)
     * @return UploadFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public UploadFile Upload file(String uplId, File file) throws ApiException {
        try {
            ApiResponse<UploadFile> localVarResp = Upload fileWithHttpInfo(uplId, file);
            return localVarResp.getData();
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Upload file
     * Upload an [audience file](https://help.lob.com/best-practices/campaign-audience-guide) and associate it with an upload.
     * @param uplId ID of the upload (required)
     * @param file  (optional)
     * @return ApiResponse&lt;UploadFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadFile> Upload fileWithHttpInfo(String uplId, File file) throws ApiException {
        try {
            okhttp3.Call localVarCall = Upload fileValidateBeforeCall(uplId, file, null);
            Type localVarReturnType = new TypeToken<UploadFile>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Upload file (asynchronously)
     * Upload an [audience file](https://help.lob.com/best-practices/campaign-audience-guide) and associate it with an upload.
     * @param uplId ID of the upload (required)
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call Upload fileAsync(String uplId, File file, final ApiCallback<UploadFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = Upload fileValidateBeforeCall(uplId, file, _callback);
        Type localVarReturnType = new TypeToken<UploadFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for Retrieve
     * @param uplId id of the upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call RetrieveCall(String uplId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replaceAll("\\{" + "upl_id" + "\\}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call RetrieveValidateBeforeCall(String uplId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling Retrieve(Async)");
        }
        

        okhttp3.Call localVarCall = RetrieveCall(uplId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public Upload Retrieve(String uplId) throws ApiException {
        try {
            ApiResponse<Upload> localVarResp = RetrieveWithHttpInfo(uplId);
            return localVarResp.getData();
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Retrieve
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> RetrieveWithHttpInfo(String uplId) throws ApiException {
        try {
            okhttp3.Call localVarCall = RetrieveValidateBeforeCall(uplId, null);
            Type localVarReturnType = new TypeToken<Upload>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Retrieve (asynchronously)
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call RetrieveAsync(String uplId, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = RetrieveValidateBeforeCall(uplId, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for Update
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call UpdateCall(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = uploadUpdatable;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replaceAll("\\{" + "upl_id" + "\\}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call UpdateValidateBeforeCall(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling Update(Async)");
        }
        
        // verify the required parameter 'uploadUpdatable' is set
        if (uploadUpdatable == null) {
            throw new ApiException("Missing the required parameter 'uploadUpdatable' when calling Update(Async)");
        }
        

        okhttp3.Call localVarCall = UpdateCall(uplId, uploadUpdatable, _callback);
        return localVarCall;

    }

    /**
     * Update
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public Upload Update(String uplId, UploadUpdatable uploadUpdatable) throws ApiException {
        try {
            ApiResponse<Upload> localVarResp = UpdateWithHttpInfo(uplId, uploadUpdatable);
            return localVarResp.getData();
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Update
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> UpdateWithHttpInfo(String uplId, UploadUpdatable uploadUpdatable) throws ApiException {
        try {
            okhttp3.Call localVarCall = UpdateValidateBeforeCall(uplId, uploadUpdatable, null);
            Type localVarReturnType = new TypeToken<Upload>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * Update (asynchronously)
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Lob uses RESTful HTTP response codes to indicate success or failure of an API request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call UpdateAsync(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = UpdateValidateBeforeCall(uplId, uploadUpdatable, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for List
     * @param campaignId id of the campaign (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ListCall(String campaignId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ListValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ListCall(campaignId, _callback);
        return localVarCall;

    }

    /**
     * List
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param campaignId id of the campaign (optional)
     * @return UploadList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public UploadList List(String campaignId) throws ApiException {
        try {
            ApiResponse<UploadList> localVarResp = ListWithHttpInfo(campaignId);
            return localVarResp.getData();
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * List
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param campaignId id of the campaign (optional)
     * @return ApiResponse&lt;UploadList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadList> ListWithHttpInfo(String campaignId) throws ApiException {
        try {
            okhttp3.Call localVarCall = ListValidateBeforeCall(campaignId, null);
            Type localVarReturnType = new TypeToken<UploadList>(){}.getType();
            return localVarApiClient.execute(localVarCall, localVarReturnType);
        } catch (ApiException e) {
            throw e;
        }
    }

    /**
     * List (asynchronously)
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param campaignId id of the campaign (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ListAsync(String campaignId, final ApiCallback<UploadList> _callback) throws ApiException {

        okhttp3.Call localVarCall = ListValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<UploadList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
