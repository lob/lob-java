/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.api.client;

import com.lob.api.ApiException;
import com.lob.model.Campaign;
import com.lob.model.CampaignDeletion;
import com.lob.model.CampaignUpdatable;
import com.lob.model.CampaignWritable;
import com.lob.model.CampaignsList;
import com.lob.model.LobError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.testng.annotations.*;

/**
 * API tests for CampaignsApi
 */
@Test(enabled=false)
public class CampaignsApiTest {

    private final CampaignsApi api = new CampaignsApi();

    
    /**
     * create
     *
     * Creates a new campaign with the provided properties. See how to launch your first campaign [here](https://help.lob.com/best-practices/launching-your-first-campaign).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void campaignCreateTest() throws ApiException {
        CampaignWritable campaignWritable = null;
        String xLangOutput = null;
                Campaign response = api.campaignCreate(campaignWritable, xLangOutput);
        // TODO: test validations
    }
    
    /**
     * delete
     *
     * Delete an existing campaign. You need only supply the unique identifier that was returned upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have been created but not sent. A campaign&#39;s &#x60;send_date&#x60; matches its associated mail pieces&#39; &#x60;send_date&#x60;s.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void campaignDeleteTest() throws ApiException {
        String cmpId = null;
                CampaignDeletion response = api.campaignDelete(cmpId);
        // TODO: test validations
    }
    
    /**
     * get
     *
     * Retrieves the details of an existing campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void campaignRetrieveTest() throws ApiException {
        String cmpId = null;
                Campaign response = api.campaignRetrieve(cmpId);
        // TODO: test validations
    }
    
    /**
     * update
     *
     * Update the details of an existing campaign. You need only supply the unique identifier that was returned upon campaign creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void campaignUpdateTest() throws ApiException {
        String cmpId = null;
        CampaignUpdatable campaignUpdatable = null;
                Campaign response = api.campaignUpdate(cmpId, campaignUpdatable);
        // TODO: test validations
    }
    
    /**
     * list
     *
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void campaignsListTest() throws ApiException {
        Integer limit = null;
        List<String> include = null;
        String before = null;
        String after = null;
                CampaignsList response = api.campaignsList(limit, include, before, after);
        // TODO: test validations
    }
    
}
