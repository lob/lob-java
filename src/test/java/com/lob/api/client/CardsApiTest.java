/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.api.client;

import com.lob.api.ApiException;
import com.lob.model.Card;
import com.lob.model.CardDeletion;
import com.lob.model.CardEditable;
import com.lob.model.CardList;
import com.lob.model.CardUpdatable;
import com.lob.model.LobError;
import com.lob.model.SortBy5;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.testng.annotations.*;

/**
 * API tests for CardsApi
 */
@Test(enabled=false)
public class CardsApiTest {

    private final CardsApi api = new CardsApi();

    
    /**
     * create
     *
     * Creates a new card given information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void cardCreateTest() throws ApiException {
        CardEditable cardEditable = null;
                Card response = api.cardCreate(cardEditable);
        // TODO: test validations
    }
    
    /**
     * delete
     *
     * Delete an existing card. You need only supply the unique identifier that was returned upon card creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void cardDeleteTest() throws ApiException {
        String cardId = null;
                CardDeletion response = api.cardDelete(cardId);
        // TODO: test validations
    }
    
    /**
     * get
     *
     * Retrieves the details of an existing card. You need only supply the unique customer identifier that was returned upon card creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void cardRetrieveTest() throws ApiException {
        String cardId = null;
                Card response = api.cardRetrieve(cardId);
        // TODO: test validations
    }
    
    /**
     * update
     *
     * Update the details of an existing card. You need only supply the unique identifier that was returned upon card creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void cardUpdateTest() throws ApiException {
        String cardId = null;
        CardUpdatable cardUpdatable = null;
                Card response = api.cardUpdate(cardId, cardUpdatable);
        // TODO: test validations
    }
    
    /**
     * list
     *
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most recently created addresses appearing first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void cardsListTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        SortBy5 sortBy = null;
                CardList response = api.cardsList(limit, before, after, sortBy);
        // TODO: test validations
    }
    
}
