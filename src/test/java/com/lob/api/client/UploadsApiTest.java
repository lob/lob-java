/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.api.client;

import com.lob.api.ApiException;
import com.lob.model.Export;
import com.lob.model.ExportModel;
import com.lob.model.HTTPValidationError;
import com.lob.model.LobError;
import com.lob.model.Upload;
import com.lob.model.UploadCreateExport;
import com.lob.model.UploadFile;
import com.lob.model.UploadUpdatable;
import com.lob.model.UploadWritable;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.testng.annotations.*;

/**
 * API tests for UploadsApi
 */
@Test(enabled=false)
public class UploadsApiTest {

    private final UploadsApi api = new UploadsApi();

    
    /**
     * get_export
     *
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void exportRetrieveTest() throws ApiException {
        String uplId = null;
        String exId = null;
                Export response = api.exportRetrieve(uplId, exId);
        // TODO: test validations
    }
    
    /**
     * get
     *
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void getTest() throws ApiException {
        String uplId = null;
                Upload response = api.get(uplId);
        // TODO: test validations
    }
    
    /**
     * create
     *
     * Creates a new upload with the provided properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void uploadCreateTest() throws ApiException {
        UploadWritable uploadWritable = null;
                Upload response = api.uploadCreate(uploadWritable);
        // TODO: test validations
    }
    
    /**
     * delete
     *
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void uploadDeleteTest() throws ApiException {
        String uplId = null;
                api.uploadDelete(uplId);
        // TODO: test validations
    }
    
    /**
     * create_export
     *
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/best-practices/launching-your-first-campaign).  Create an export file associated with an upload.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void uploadExportCreateTest() throws ApiException {
        String uplId = null;
        ExportModel exportModel = null;
                UploadCreateExport response = api.uploadExportCreate(uplId, exportModel);
        // TODO: test validations
    }
    
    /**
     * upload_file
     *
     * Upload an [audience file](https://help.lob.com/best-practices/campaign-audience-guide) and associate it with an upload.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void uploadFileCreateTest() throws ApiException {
        String uplId = null;
        Object file = null;
                UploadFile response = api.uploadFileCreate(uplId, file);
        // TODO: test validations
    }
    
    /**
     * update
     *
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void uploadUpdateTest() throws ApiException {
        String uplId = null;
        UploadUpdatable uploadUpdatable = null;
                Upload response = api.uploadUpdate(uplId, uploadUpdatable);
        // TODO: test validations
    }
    
    /**
     * list
     *
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void uploadsListTest() throws ApiException {
        String campaignId = null;
                List<Upload> response = api.uploadsList(campaignId);
        // TODO: test validations
    }
    
}
