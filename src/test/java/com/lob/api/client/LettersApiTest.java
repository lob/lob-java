/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.api.client;

import com.lob.api.ApiException;
import com.lob.model.Letter;
import com.lob.model.LetterDeletion;
import com.lob.model.LetterEditable;
import com.lob.model.LetterList;
import com.lob.model.LobError;
import com.lob.model.MailType;
import com.lob.model.SortBy5;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.testng.annotations.*;

/**
 * API tests for LettersApi
 */
@Test(enabled=false)
public class LettersApiTest {

    private final LettersApi api = new LettersApi();

    
    /**
     * cancel
     *
     * Completely removes a letter from production. This can only be done if the letter has a &#x60;send_date&#x60; and the &#x60;send_date&#x60; has not yet passed. If the letter is successfully canceled, you will not be charged for it. Read more on [cancellation windows](#section/Cancellation-Windows) and [scheduling](#section/Scheduled-Mailings). Scheduling and cancellation is a premium feature. Upgrade to the appropriate [Print &amp; Mail Edition](https://dashboard.lob.com/#/settings/editions) to gain access.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void letterCancelTest() throws ApiException {
        String ltrId = null;
                LetterDeletion response = api.letterCancel(ltrId);
        // TODO: test validations
    }
    
    /**
     * create
     *
     * Creates a new letter given information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void letterCreateTest() throws ApiException {
        LetterEditable letterEditable = null;
        String idempotencyKey = null;
                Letter response = api.letterCreate(letterEditable, idempotencyKey);
        // TODO: test validations
    }
    
    /**
     * get
     *
     * Retrieves the details of an existing letter. You need only supply the unique letter identifier that was returned upon letter creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void letterRetrieveTest() throws ApiException {
        String ltrId = null;
                Letter response = api.letterRetrieve(ltrId);
        // TODO: test validations
    }
    
    /**
     * list
     *
     * Returns a list of your letters. The letters are returned sorted by creation date, with the most recently created letters appearing first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void lettersListTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        Map<String, String> metadata = null;
        Boolean color = null;
        Boolean scheduled = null;
        Map<String, String> sendDate = null;
        MailType mailType = null;
        SortBy5 sortBy = null;
                LetterList response = api.lettersList(limit, before, after, include, dateCreated, metadata, color, scheduled, sendDate, mailType, sortBy);
        // TODO: test validations
    }
    
}
