/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.api.client;

import com.lob.api.ApiException;
import com.lob.model.BankAccount;
import com.lob.model.BankAccountDeletion;
import com.lob.model.BankAccountList;
import com.lob.model.BankAccountVerify;
import com.lob.model.BankAccountWritable;
import com.lob.model.LobError;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.testng.annotations.*;

/**
 * API tests for BankAccountsApi
 */
@Test(enabled=false)
public class BankAccountsApiTest {

    private final BankAccountsApi api = new BankAccountsApi();

    
    /**
     * create
     *
     * Creates a new bank account with the provided properties. Bank accounts created in live mode will need to be verified via micro deposits before being able to send live checks. The deposits will appear in the bank account in 2-3 business days and have the description \&quot;VERIFICATION\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void bankAccountCreateTest() throws ApiException {
        BankAccountWritable bankAccountWritable = null;
                BankAccount response = api.bankAccountCreate(bankAccountWritable);
        // TODO: test validations
    }
    
    /**
     * delete
     *
     * Permanently deletes a bank account. It cannot be undone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void bankAccountDeleteTest() throws ApiException {
        String bankId = null;
                BankAccountDeletion response = api.bankAccountDelete(bankId);
        // TODO: test validations
    }
    
    /**
     * get
     *
     * Retrieves the details of an existing bank account. You need only supply the unique bank account identifier that was returned upon bank account creation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void bankAccountRetrieveTest() throws ApiException {
        String bankId = null;
                BankAccount response = api.bankAccountRetrieve(bankId);
        // TODO: test validations
    }
    
    /**
     * verify
     *
     * Verify a bank account in order to create a check.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void bankAccountVerifyTest() throws ApiException {
        String bankId = null;
        BankAccountVerify bankAccountVerify = null;
                BankAccount response = api.bankAccountVerify(bankId, bankAccountVerify);
        // TODO: test validations
    }
    
    /**
     * list
     *
     * Returns a list of your bank accounts. The bank accounts are returned sorted by creation date, with the most recently created bank accounts appearing first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void bankAccountsListTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        Map<String, String> metadata = null;
                BankAccountList response = api.bankAccountsList(limit, before, after, include, dateCreated, metadata);
        // TODO: test validations
    }
    
}
