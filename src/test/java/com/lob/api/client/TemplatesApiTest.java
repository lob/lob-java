/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> Looking for our [previous documentation](https://lob.github.io/legacy-docs/)? 
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.lob.api.client;

import com.lob.api.ApiException;
import com.lob.model.LobError;
import com.lob.model.Template;
import com.lob.model.TemplateDeletion;
import com.lob.model.TemplateList;
import com.lob.model.TemplateUpdate;
import com.lob.model.TemplateWritable;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.testng.annotations.*;

/**
 * API tests for TemplatesApi
 */
@Test(enabled=false)
public class TemplatesApiTest {

    private final TemplatesApi api = new TemplatesApi();

    
    /**
     * create
     *
     * Creates a new template for use with the Print &amp; Mail API. In Live mode, you can only have as many non-deleted templates as allotted in your current [Print &amp; Mail Edition](https://dashboard.lob.com/#/settings/editions). If you attempt to create a template past your limit, you will receive a &#x60;403&#x60; error. There is no limit in Test mode.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void createTemplateTest() throws ApiException {
        TemplateWritable templateWritable = null;
                Template response = api.createTemplate(templateWritable);
        // TODO: test validations
    }
    
    /**
     * delete
     *
     * Permanently deletes a template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void templateDeleteTest() throws ApiException {
        String tmplId = null;
                TemplateDeletion response = api.templateDelete(tmplId);
        // TODO: test validations
    }
    
    /**
     * get
     *
     * Retrieves the details of an existing template.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void templateRetrieveTest() throws ApiException {
        String tmplId = null;
                Template response = api.templateRetrieve(tmplId);
        // TODO: test validations
    }
    
    /**
     * update
     *
     * Updates the description and/or published version of the template with the given id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void templateUpdateTest() throws ApiException {
        String tmplId = null;
        TemplateUpdate templateUpdate = null;
                Template response = api.templateUpdate(tmplId, templateUpdate);
        // TODO: test validations
    }
    
    /**
     * list
     *
     * Returns a list of your templates. The templates are returned sorted by creation date, with the most recently created templates appearing first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test(enabled=false)
    public void templatesListTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        Map<String, String> metadata = null;
                TemplateList response = api.templatesList(limit, before, after, include, dateCreated, metadata);
        // TODO: test validations
    }
    
}
